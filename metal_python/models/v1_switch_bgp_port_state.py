# coding: utf-8

"""
    metal-api

    API to manage and control plane resources like machines, switches, operating system images, machine sizes, networks, IP addresses and more  # noqa: E501

    OpenAPI spec version: v0.40.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class V1SwitchBGPPortState(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'accepted_prefix_counter': 'int',
        'bgp_state': 'str',
        'bgp_timer_up_established': 'int',
        'neighbor': 'str',
        'peer_group': 'str',
        'sent_prefix_counter': 'int',
        'vrf_name': 'str'
    }

    attribute_map = {
        'accepted_prefix_counter': 'AcceptedPrefixCounter',
        'bgp_state': 'BgpState',
        'bgp_timer_up_established': 'BgpTimerUpEstablished',
        'neighbor': 'Neighbor',
        'peer_group': 'PeerGroup',
        'sent_prefix_counter': 'SentPrefixCounter',
        'vrf_name': 'VrfName'
    }

    def __init__(self, accepted_prefix_counter=None, bgp_state=None, bgp_timer_up_established=None, neighbor=None, peer_group=None, sent_prefix_counter=None, vrf_name=None):  # noqa: E501
        """V1SwitchBGPPortState - a model defined in Swagger"""  # noqa: E501

        self._accepted_prefix_counter = None
        self._bgp_state = None
        self._bgp_timer_up_established = None
        self._neighbor = None
        self._peer_group = None
        self._sent_prefix_counter = None
        self._vrf_name = None
        self.discriminator = None

        self.accepted_prefix_counter = accepted_prefix_counter
        self.bgp_state = bgp_state
        self.bgp_timer_up_established = bgp_timer_up_established
        self.neighbor = neighbor
        self.peer_group = peer_group
        self.sent_prefix_counter = sent_prefix_counter
        self.vrf_name = vrf_name

    @property
    def accepted_prefix_counter(self):
        """Gets the accepted_prefix_counter of this V1SwitchBGPPortState.  # noqa: E501


        :return: The accepted_prefix_counter of this V1SwitchBGPPortState.  # noqa: E501
        :rtype: int
        """
        return self._accepted_prefix_counter

    @accepted_prefix_counter.setter
    def accepted_prefix_counter(self, accepted_prefix_counter):
        """Sets the accepted_prefix_counter of this V1SwitchBGPPortState.


        :param accepted_prefix_counter: The accepted_prefix_counter of this V1SwitchBGPPortState.  # noqa: E501
        :type: int
        """
        if accepted_prefix_counter is None:
            raise ValueError("Invalid value for `accepted_prefix_counter`, must not be `None`")  # noqa: E501

        self._accepted_prefix_counter = accepted_prefix_counter

    @property
    def bgp_state(self):
        """Gets the bgp_state of this V1SwitchBGPPortState.  # noqa: E501


        :return: The bgp_state of this V1SwitchBGPPortState.  # noqa: E501
        :rtype: str
        """
        return self._bgp_state

    @bgp_state.setter
    def bgp_state(self, bgp_state):
        """Sets the bgp_state of this V1SwitchBGPPortState.


        :param bgp_state: The bgp_state of this V1SwitchBGPPortState.  # noqa: E501
        :type: str
        """
        if bgp_state is None:
            raise ValueError("Invalid value for `bgp_state`, must not be `None`")  # noqa: E501

        self._bgp_state = bgp_state

    @property
    def bgp_timer_up_established(self):
        """Gets the bgp_timer_up_established of this V1SwitchBGPPortState.  # noqa: E501


        :return: The bgp_timer_up_established of this V1SwitchBGPPortState.  # noqa: E501
        :rtype: int
        """
        return self._bgp_timer_up_established

    @bgp_timer_up_established.setter
    def bgp_timer_up_established(self, bgp_timer_up_established):
        """Sets the bgp_timer_up_established of this V1SwitchBGPPortState.


        :param bgp_timer_up_established: The bgp_timer_up_established of this V1SwitchBGPPortState.  # noqa: E501
        :type: int
        """
        if bgp_timer_up_established is None:
            raise ValueError("Invalid value for `bgp_timer_up_established`, must not be `None`")  # noqa: E501

        self._bgp_timer_up_established = bgp_timer_up_established

    @property
    def neighbor(self):
        """Gets the neighbor of this V1SwitchBGPPortState.  # noqa: E501


        :return: The neighbor of this V1SwitchBGPPortState.  # noqa: E501
        :rtype: str
        """
        return self._neighbor

    @neighbor.setter
    def neighbor(self, neighbor):
        """Sets the neighbor of this V1SwitchBGPPortState.


        :param neighbor: The neighbor of this V1SwitchBGPPortState.  # noqa: E501
        :type: str
        """
        if neighbor is None:
            raise ValueError("Invalid value for `neighbor`, must not be `None`")  # noqa: E501

        self._neighbor = neighbor

    @property
    def peer_group(self):
        """Gets the peer_group of this V1SwitchBGPPortState.  # noqa: E501


        :return: The peer_group of this V1SwitchBGPPortState.  # noqa: E501
        :rtype: str
        """
        return self._peer_group

    @peer_group.setter
    def peer_group(self, peer_group):
        """Sets the peer_group of this V1SwitchBGPPortState.


        :param peer_group: The peer_group of this V1SwitchBGPPortState.  # noqa: E501
        :type: str
        """
        if peer_group is None:
            raise ValueError("Invalid value for `peer_group`, must not be `None`")  # noqa: E501

        self._peer_group = peer_group

    @property
    def sent_prefix_counter(self):
        """Gets the sent_prefix_counter of this V1SwitchBGPPortState.  # noqa: E501


        :return: The sent_prefix_counter of this V1SwitchBGPPortState.  # noqa: E501
        :rtype: int
        """
        return self._sent_prefix_counter

    @sent_prefix_counter.setter
    def sent_prefix_counter(self, sent_prefix_counter):
        """Sets the sent_prefix_counter of this V1SwitchBGPPortState.


        :param sent_prefix_counter: The sent_prefix_counter of this V1SwitchBGPPortState.  # noqa: E501
        :type: int
        """
        if sent_prefix_counter is None:
            raise ValueError("Invalid value for `sent_prefix_counter`, must not be `None`")  # noqa: E501

        self._sent_prefix_counter = sent_prefix_counter

    @property
    def vrf_name(self):
        """Gets the vrf_name of this V1SwitchBGPPortState.  # noqa: E501


        :return: The vrf_name of this V1SwitchBGPPortState.  # noqa: E501
        :rtype: str
        """
        return self._vrf_name

    @vrf_name.setter
    def vrf_name(self, vrf_name):
        """Sets the vrf_name of this V1SwitchBGPPortState.


        :param vrf_name: The vrf_name of this V1SwitchBGPPortState.  # noqa: E501
        :type: str
        """
        if vrf_name is None:
            raise ValueError("Invalid value for `vrf_name`, must not be `None`")  # noqa: E501

        self._vrf_name = vrf_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1SwitchBGPPortState, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1SwitchBGPPortState):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
